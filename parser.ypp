%{
	#include "output.hpp"
	#include <iostream>
	#include <stdlib.h>
	#define YYDEBUG 1

	using namespace std;
	using namespace output;
	extern int yylex();
	extern int yylineno;
	int yyerror(const char * message);
%}

%right ASSIGN
%left OR
%left AND
%left EQUALOP
%right IF NOT
%token VOID INT BYTE B BOOL TRUE FALSE RETURN WHILE BREAK CONTINUE SWITCH CASE DEFAULT COLON SC COMMA ID NUM STRING
%nonassoc RELOP
%left PLUS MINUS
%left DIV MULT
%left LPAREN RPAREN LBRACE RBRACE
%nonassoc ELSE


%%

Program : Funcs {printProductionRule(1);}
;
Funcs :  FuncDecl Funcs{printProductionRule(3);}
		| {printProductionRule(2);}
;
FuncDecl : RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE{printProductionRule(4);}
;
RetType :   Type{printProductionRule(5);}
            |VOID{printProductionRule(6);}
;
Formals :   FormalList{printProductionRule(8);}
			|/*epsilon*/{printProductionRule(7);}
;
FormalList : FormalDect COMMA FormalList{printProductionRule(10);}
			|FormalDect{printProductionRule(9);}
            
;
FormalDect : Type ID{printProductionRule(11);}
;
Statements :	Statements Statement{printProductionRule(13);} 
				|Statement{printProductionRule(12);}
            
;
Statement : LBRACE Statements RBRACE{printProductionRule(14);}
			|Type ID ASSIGN Exp SC{printProductionRule(16);}
            |Type ID SC{printProductionRule(15);}
            |ID ASSIGN Exp SC{printProductionRule(17);}
            |Call SC{printProductionRule(18);}
            |RETURN Exp SC{printProductionRule(20);}
			|RETURN SC{printProductionRule(19);}
			|IF LPAREN Exp RPAREN Statement{printProductionRule(21);} 
			|IF LPAREN Exp RPAREN Statement ELSE Statement{printProductionRule(22);}
            |WHILE LPAREN Exp RPAREN Statement{printProductionRule(23);}
            |BREAK SC{printProductionRule(24);}
            |CONTINUE SC{printProductionRule(25);}
            |SWITCH LPAREN Exp RPAREN LBRACE CaseList RBRACE{printProductionRule(26);}
;
Call :  ID LPAREN ExpList RPAREN{printProductionRule(27);}
        |ID LPAREN RPAREN{printProductionRule(28);}
;
ExpList : 	Exp COMMA ExpList{printProductionRule(30);}
			|Exp{printProductionRule(29);}
        
;
Type : INT{printProductionRule(31);}
        |BYTE{printProductionRule(32);}
        |BOOL{printProductionRule(33);}
;
Exp : LPAREN Exp RPAREN{printProductionRule(34);}
    |Exp MULT Exp{printProductionRule(35);}
	|Exp DIV Exp{printProductionRule(35);}
	|Exp MINUS Exp{printProductionRule(35);}
	|Exp PLUS Exp{printProductionRule(35);}
    |ID{printProductionRule(36);}
    |Call{printProductionRule(37);}
	|NUM B{printProductionRule(39);}
    |NUM{printProductionRule(38);}
    |STRING{printProductionRule(40);}
    |TRUE{printProductionRule(41);}
    |FALSE{printProductionRule(42);}
    |NOT Exp{printProductionRule(43);}
    |Exp AND Exp{printProductionRule(44);}
    |Exp OR Exp{printProductionRule(45);}
    |Exp RELOP Exp{printProductionRule(46);}
	|Exp EQUALOP Exp{printProductionRule(46);}
    |LPAREN Type RPAREN Exp{printProductionRule(47);}
;
CaseList :  CaseDeal CaseList{printProductionRule(48);}
            |CaseDeal{printProductionRule(49);}
            |DEFAULT COLON Statements{printProductionRule(50);}
;
CaseDeal : CASE NUM COLON Statements{printProductionRule(51);}
;

%%

int main()
{
	//yydebug = 1;
	return yyparse();
}

int yyerror(const char * message)
{
	errorSyn(yylineno);
	exit(0);
}
